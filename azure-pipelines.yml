variables:
  configuration: Release
  platform: x64

resources:
- repo: self
  fetchDepth: 1

stages:
- stage: Build
  jobs:
  - job: Build
    strategy:
      matrix:
        Windows_vc141:
          vmImage: VS2017-Win2016
          project: vs2017
          compiler: vc141
          installCommand: 'choco install python3'
          artifactSuffix: '_vc141_win_$(platform)_$(configuration)'
          CC: cl.exe
          CXX: cl.exe

        Linux_gcc9:
          vmImage: Ubuntu-18.04
          project: ninja
          compiler: gcc
          installCommand: |
            sudo dpkg --add-architecture i386
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install g++-9 ninja-build wine64 wine64-tools libwine-dev winetricks libx11-dev libgl1-mesa-dev libopenal-dev python3
            export WINEARCH=win32
            winetricks
          artifactSuffix: '_gcc9_linux_$(platform)_$(configuration)'
          CC: gcc-9
          CXX: g++-9

        Linux_gcc10:
          vmImage: Ubuntu-18.04
          project: ninja
          compiler: gcc
          installCommand: |
            sudo dpkg --add-architecture i386
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install g++-10 ninja-build wine64 wine64-tools libwine-dev winetricks libx11-dev libgl1-mesa-dev libopenal-dev python3
            export WINEARCH=win32
            winetricks
          artifactSuffix: '_gcc10_linux_$(platform)_$(configuration)'
          CC: gcc-10
          CXX: g++-10

        Linux_clang10:
          vmImage: Ubuntu-18.04
          project: ninja
          compiler: clang
          installCommand: |
            sudo dpkg --add-architecture i386
            wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main"
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install clang-10 libc++-10-dev libc++abi-10-dev lld-10 ninja-build wine64 wine64-tools libwine-dev winetricks libx11-dev libgl1-mesa-dev libopenal-dev python3
            export WINEARCH=win32
            winetricks
          artifactSuffix: '_clang10_linux_$(platform)_$(configuration)'
          CC: clang-10
          CXX: clang++-10

        Linux_clang11:
          vmImage: Ubuntu-18.04
          project: ninja
          compiler: clang
          installCommand: |
            sudo dpkg --add-architecture i386
            wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-11 main"
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install clang-11 libc++-11-dev libc++abi-11-dev lld-11 ninja-build wine64 wine64-tools libwine-dev winetricks libx11-dev libgl1-mesa-dev libopenal-dev python3
            export WINEARCH=win32
            winetricks
          artifactSuffix: '_clang11_linux_$(platform)_$(configuration)'
          CC: clang-11
          CXX: clang++-11

#        macOS_10_clang:
#          vmImage: macOS 10.14
#          project: ninja
#          compiler: clang
#          installCommand: |
#            brew tap gongminmin/core
#            brew install --cask xquartz
#            brew install ninja wine
#            wine --version
#            winegcc --version
#          artifactSuffix: '_clang_darwin_$(platform)_$(configuration)'
#          CC: clang
#          CXX: clang++
#          MACOSX_DEPLOYMENT_TARGET: 10.14

    pool:
      vmImage: $(vmImage)

    steps:
      - bash: eval '$(installCommand)'
        displayName: 'Install'

      - script: |
          git config --global user.email "dummy@example.com"
          git config --global user.name "Dummy Name"
        displayName: 'Config git'

      - task: PythonScript@0
        displayName: 'Build'
        inputs:
          scriptPath: Build.py
          arguments: '$(project) $(compiler) $(platform) $(configuration)'

      - task: PythonScript@0
        displayName: 'Generate artifacts'
        inputs:
          scriptPath: Package.py
          arguments: '$(Build.ArtifactStagingDirectory) $(project) $(compiler) $(platform) $(configuration)'
        condition: succeeded()

      - bash: 'echo $BUILD_SOURCEVERSION > $BUILD_ARTIFACTSTAGINGDIRECTORY/GIT-COMMIT.txt'
        displayName: 'Add commit info'
        condition: succeeded()

      - task: PublishPipelineArtifact@1
        displayName: 'Publish artifacts'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: KlayGE_Samples$(artifactSuffix)
        condition: succeeded()
