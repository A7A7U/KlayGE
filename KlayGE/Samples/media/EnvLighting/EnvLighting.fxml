<?xml version='1.0'?>

<effect>
	<include name="Lighting.fxml"/>
	<include name="util.fxml"/>
	<include name="Quaternion.fxml"/>
	<include name="Mesh.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="model"/>
		<parameter type="float4x4" name="mvp"/>
		<parameter type="float3" name="eye_pos"/>
		<parameter type="int2" name="diff_spec_mip"/>
		<parameter type="float3" name="diffuse"/>
		<parameter type="float3" name="specular"/>
		<parameter type="float" name="glossiness"/>
	</cbuffer>

	<parameter type="textureCUBE" name="skybox_Ycube_tex"/>
	<parameter type="textureCUBE" name="skybox_Ccube_tex"/>
	<parameter type="sampler" name="skybox_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>

	<parameter type="texture2D" name="integrated_brdf_tex"/>
	<parameter type="texture2D" name="color_map"/>
	<parameter type="sampler" name="bilinear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
		<state name="address_w" value="clamp"/>
	</parameter>

	<shader>
		<![CDATA[
float3 PrefilteredDiffuseIBL(float3 c_diff, float3 normal)
{
	float3 prefiltered_clr = decode_hdr_yc(skybox_Ycube_tex.SampleLevel(skybox_sampler, normal, diff_spec_mip.x).r,
		skybox_Ccube_tex.SampleLevel(skybox_sampler, normal, diff_spec_mip.x)).xyz;
	return CalcEnvDiffuse(prefiltered_clr, c_diff);
}

float3 PrefilteredSpecularIBL(float3 c_spec, float glossiness, float3 normal, float3 view)
{
	float mip = CalcPrefilteredEnvMip(glossiness, diff_spec_mip.y);
	float shininess = Glossiness2Shininess(glossiness);
	float3 r = CalcPrefilteredEnvVec(normal, view);
	float3 prefiltered_clr = decode_hdr_yc(skybox_Ycube_tex.SampleLevel(skybox_sampler, r, mip).r,
		skybox_Ccube_tex.SampleLevel(skybox_sampler, r, mip)).xyz;
	return prefiltered_clr * saturate(CalcBRDFShading(0, specular, shininess, r, normal, normal));
}

float3 PBPrefilteredSpecularIBL(float3 c_spec, float glossiness, float3 normal, float3 view)
{
	// Must match the ones in .cpp
	const float LUT_X_SCALE_FACTOR = 1.0079f;
	const float LUT_Y_SCALE_FACTOR = 66.023f;

	float mip = CalcPrefilteredEnvMip(glossiness, diff_spec_mip.y);
	float n_dot_v = saturate(dot(normal, view));
	float3 r = CalcPrefilteredEnvVec(normal, view);	
	float3 prefiltered_clr = decode_hdr_yc(skybox_Ycube_tex.SampleLevel(skybox_sampler, r, mip).r,
		skybox_Ccube_tex.SampleLevel(skybox_sampler, r, mip)).xyz;
	float2 env_brdf = integrated_brdf_tex.Sample(bilinear_sampler, float2(n_dot_v, glossiness)).xy
		/ float2(LUT_X_SCALE_FACTOR, LUT_Y_SCALE_FACTOR);
	return prefiltered_clr * (c_spec * env_brdf.x + env_brdf.y);
}

float3 PBFittingPrefilteredSpecularIBL(float3 c_spec, float glossiness, float3 normal, float3 view)
{
	float mip = CalcPrefilteredEnvMip(glossiness, diff_spec_mip.y);
	float3 r = CalcPrefilteredEnvVec(normal, view);
	float3 prefiltered_clr = decode_hdr_yc(skybox_Ycube_tex.SampleLevel(skybox_sampler, r, mip).r,
		skybox_Ccube_tex.SampleLevel(skybox_sampler, r, mip)).xyz;
	return CalcEnvSpecular(prefiltered_clr, c_spec, glossiness, normal, view);
}

float SELU(float x)
{
	const float alpha = 1.6732632423543772848170429916717f;
	const float scale = 1.0507009873554804934193349852946f;
	return scale * (max(0.0f, x) + min(0.0f, alpha * (exp(x) - 1)));
}

float EvalL4NN(float2 layer_0,
	const float2 nn_layer_1_weight[3], const float nn_layer_1_bias[3],
	const float3 nn_layer_2_weight[3], const float nn_layer_2_bias[3],
	const float3 nn_layer_3_weight[1], const float nn_layer_3_bias[1])
{
	float3 layer_1;
	for (uint i = 0; i < 3; ++i)
	{
		layer_1[i] = SELU(dot(nn_layer_1_weight[i], layer_0) + nn_layer_1_bias[i]);
	}
	float3 layer_2;
	for (i = 0; i < 3; ++i)
	{
		layer_2[i] = SELU(dot(nn_layer_2_weight[i], layer_1) + nn_layer_2_bias[i]);
	}
	return SELU(dot(nn_layer_3_weight[0], layer_2) + nn_layer_3_bias[0]);
}

float3 CalcEnvSpecularNN(float3 prefiltered_env, float3 c_spec, float glossiness, float3 normal, float3 view)
{
	const float2 x_nn_layer_1_weight[] = {
		{-1.211678147f, -0.085554644f},
		{3.755282879f, 0.130163789f},
		{-0.089037426f, -4.871636391f},
	};
	const float x_nn_layer_1_bias[] = {1.296738148f, -3.892668962f, 1.077974200f};

	const float3 x_nn_layer_2_weight[] = {
		{0.053118810f, -0.716794968f, -0.044706523f},
		{0.046024829f, -0.201801717f, 0.142952874f},
		{-3.347775698f, -0.373522669f, 0.225604177f},
	};
	const float x_nn_layer_2_bias[] = {-1.313303113f, -0.145755783f, 0.020353734f};

	const float3 x_nn_layer_3_weight[] = {
		{-1.436112523f, -0.118548520f, -0.831146538f},
	};
	const float x_nn_layer_3_bias[] = {-1.348872900f};

	const float2 y_nn_layer_1_weight[] = {
		{-3.321223259f, -0.127546296f},
		{-1.003819108f, 0.361338705f},
		{0.971514344f, -0.411502719f},
	};
	const float y_nn_layer_1_bias[] = {0.228082374f, 0.065170504f, 0.092815928f};

	const float3 y_nn_layer_2_weight[] = {
		{-0.422195077f, -0.454904228f, -0.851188421f},
		{0.477648884f, -0.780704498f, -0.455212682f},
		{0.053152274f, -1.754751921f, -1.737720013f},
	};
	const float y_nn_layer_2_bias[] = {-0.403342962f, 0.532369673f, -0.017129032f};

	const float3 y_nn_layer_3_weight[] = {
		{0.063786052f, 0.064103790f, -0.060237456f},
	};
	const float y_nn_layer_3_bias[] = {-0.003140349f};

	float n_dot_v = saturate(dot(normal, view));
	float2 xy = float2(n_dot_v, glossiness);
	float2 env_brdf;
	env_brdf.x = EvalL4NN(xy,
		x_nn_layer_1_weight, x_nn_layer_1_bias,
		x_nn_layer_2_weight, x_nn_layer_2_bias,
		x_nn_layer_3_weight, x_nn_layer_3_bias);
	env_brdf.y = EvalL4NN(xy,
		y_nn_layer_1_weight, y_nn_layer_1_bias,
		y_nn_layer_2_weight, y_nn_layer_2_bias,
		y_nn_layer_3_weight, y_nn_layer_3_bias);

	env_brdf = saturate(env_brdf);
	return prefiltered_env * (c_spec * env_brdf.x + env_brdf.y);
}

float3 PBNNPrefilteredSpecularIBL(float3 c_spec, float glossiness, float3 normal, float3 view)
{
	float mip = CalcPrefilteredEnvMip(glossiness, diff_spec_mip.y);
	float3 r = CalcPrefilteredEnvVec(normal, view);
	float3 prefiltered_clr = decode_hdr_yc(skybox_Ycube_tex.SampleLevel(skybox_sampler, r, mip).r,
		skybox_Ccube_tex.SampleLevel(skybox_sampler, r, mip)).xyz;
	return CalcEnvSpecularNN(prefiltered_clr, c_spec, glossiness, normal, view);
}

void GroundTruthVS(float4 pos		: POSITION,
				float4 tangent_quat	: TANGENT,
				out float3 oNormal	: TEXCOORD0,
				out float3 oIncident : TEXCOORD1,
				out float4 oPos		: SV_Position)
{
	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	tangent_quat = tangent_quat * 2 - 1;

	oPos = mul(pos, mvp);
	oNormal = mul(transform_quat(float3(0, 0, 1), tangent_quat), (float3x3)model);
	oIncident = eye_pos - mul(pos, model).xyz;
}

float4 PrefilteredPS(float3 normal : TEXCOORD0, float3 incident : TEXCOORD1) : SV_Target
{
	normal = normalize(normal);
	incident = normalize(incident);

	return float4(PrefilteredDiffuseIBL(diffuse, normal)
		+ PrefilteredSpecularIBL(specular, glossiness, normal, incident), 1);
}

float4 PBPrefilteredPS(float3 normal : TEXCOORD0, float3 incident : TEXCOORD1) : SV_Target
{
	normal = normalize(normal);
	incident = normalize(incident);

	return float4(PrefilteredDiffuseIBL(diffuse, normal)
		+ PBPrefilteredSpecularIBL(specular, glossiness, normal, incident), 1);
}

float4 PBFittingPrefilteredPS(float3 normal : TEXCOORD0, float3 incident : TEXCOORD1) : SV_Target
{
	normal = normalize(normal);
	incident = normalize(incident);

	return float4(PrefilteredDiffuseIBL(diffuse, normal)
		+ PBFittingPrefilteredSpecularIBL(specular, glossiness, normal, incident), 1);
}

float4 PBNNPrefilteredPS(float3 normal : TEXCOORD0, float3 incident : TEXCOORD1) : SV_Target
{
	normal = normalize(normal);
	incident = normalize(incident);

	return float4(PrefilteredDiffuseIBL(diffuse, normal)
		+ PBNNPrefilteredSpecularIBL(specular, glossiness, normal, incident), 1);
}

float4 ShowErrorPS(float3 normal : TEXCOORD0, float3 incident : TEXCOORD1) : SV_Target
{
#if FITTING
	float4 prefiltered = PBFittingPrefilteredPS(normal, incident);
#else
	float4 prefiltered = PBNNPrefilteredPS(normal, incident);
#endif
	
	float3 error = abs(prefiltered - PBPrefilteredPS(normal, incident)).xyz;

	const float3 RGB_TO_LUM = float3(0.2126f, 0.7152f, 0.0722f);
	float lum = saturate(dot(error * 20, RGB_TO_LUM));

	return pow(color_map.SampleLevel(bilinear_sampler, float2(lum, 0.5f), 0), 2.2f);
}
		]]>
	</shader>

	<shader version="4">
		<![CDATA[
uint ReverseBits(uint bits)
{
	bits = (bits << 16) | (bits >> 16);
	bits = ((bits & 0x55555555) << 1) | ((bits & 0xAAAAAAAA) >> 1);
	bits = ((bits & 0x33333333) << 2) | ((bits & 0xCCCCCCCC) >> 2);
	bits = ((bits & 0x0F0F0F0F) << 4) | ((bits & 0xF0F0F0F0) >> 4);
	bits = ((bits & 0x00FF00FF) << 8) | ((bits & 0xFF00FF00) >> 8);
	return bits;
}

float RadicalInverseVdC(uint bits)
{
	return ReverseBits(bits) * 2.3283064365386963e-10f; // / 0x100000000
}

float2 Hammersley2D(uint i, uint N)
{
	return float2(float(i) / N, RadicalInverseVdC(i));
}

float3 ImportanceSampleLambert(float2 xi)
{
	const float PI = 3.1415926f;

	float phi = 2 * PI * xi.x;
	float cos_theta = sqrt(1 - xi.y);
	float sin_theta = sqrt(1 - cos_theta * cos_theta);
	return float3(sin_theta * cos(phi), sin_theta * sin(phi), cos_theta);
}

float3 ImportanceSampleLambert(float2 xi, float3 normal)
{
	float3 h = ImportanceSampleLambert(xi);
	
	float3 up_vec = abs(normal.z) < 0.999f ? float3(0, 0, 1) : float3(1, 0, 0);
	float3 tangent = normalize(cross(up_vec, normal));
	float3 binormal = cross(normal, tangent);
	return tangent * h.x + binormal * h.y + normal * h.z;
}

float3 ImportanceSampleBP(float2 xi, float shininess)
{
	const float PI = 3.1415926f;

	float phi = 2 * PI * xi.x;
	float cos_theta = pow(1 - xi.y * (shininess + 1) / (shininess + 2), 1 / (shininess + 1));
	float sin_theta = sqrt(1 - cos_theta * cos_theta);
	return float3(sin_theta * cos(phi), sin_theta * sin(phi), cos_theta);
}

float3 ImportanceSampleBP(float2 xi, float shininess, float3 normal)
{
	float3 h = ImportanceSampleBP(xi, shininess);
	
	float3 up_vec = abs(normal.z) < 0.999f ? float3(0, 0, 1) : float3(1, 0, 0);
	float3 tangent = normalize(cross(up_vec, normal));
	float3 binormal = cross(normal, tangent);
	return tangent * h.x + binormal * h.y + normal * h.z;
}

float GImplicit(float n_dot_v, float n_dot_l)
{
	return n_dot_v * n_dot_l;
}

float3 DiffuseIBL(float3 c_diff, float3 normal)
{
	float3 prefiltered_clr = 0;
	
	const uint NUM_SAMPLES = 1024;
	for (uint i = 0; i < NUM_SAMPLES; ++ i)
	{
		float2 xi = Hammersley2D(i, NUM_SAMPLES);
		float3 l = ImportanceSampleLambert(xi, normal);
		prefiltered_clr += decode_hdr_yc(skybox_Ycube_tex.SampleLevel(skybox_sampler, l, 0).r,
			skybox_Ccube_tex.SampleLevel(skybox_sampler, l, 0)).xyz;
	}

	return c_diff * prefiltered_clr / NUM_SAMPLES;
}

float3 SpecularIBL(float3 c_spec, float glossiness, float3 normal, float3 view)
{
	float shininess = Glossiness2Shininess(glossiness);

	float3 specular = 0;
	
	const uint NUM_SAMPLES = 1024;
	for (uint i = 0; i < NUM_SAMPLES; ++ i)
	{
		float2 xi = Hammersley2D(i, NUM_SAMPLES);
		float3 h = ImportanceSampleBP(xi, shininess, normal);
		float3 l = -reflect(view, h);
		float n_dot_v = saturate(dot(normal, view));
		float n_dot_l = saturate(dot(normal, l));
		float n_dot_h = saturate(dot(normal, h));
		float v_dot_h = saturate(dot(view, h));
		if (n_dot_l > 0)
		{
			float3 env_clr = decode_hdr_yc(skybox_Ycube_tex.SampleLevel(skybox_sampler, l, 0).r,
				skybox_Ccube_tex.SampleLevel(skybox_sampler, l, 0)).xyz;
			float g = GImplicit(n_dot_v, n_dot_l);
			float fc = pow(1 - v_dot_h, 5);
			float3 f = (1 - fc) * c_spec + fc;
			specular += env_clr * f * g * v_dot_h / max(1e-6f, n_dot_h * n_dot_v);
		}
	}

	return specular / NUM_SAMPLES;
}

float3 PrefilterEnvMap(float shininess, float3 r)
{
	float3 normal = r;
	float3 view = r;
	float3 prefiltered_clr = 0;
	float total_weight = 0;

	const uint NUM_SAMPLES = 1024;
	for (uint i = 0; i < NUM_SAMPLES; ++ i)
	{
		float2 xi = Hammersley2D(i, NUM_SAMPLES);
		float3 h = ImportanceSampleBP(xi, shininess, normal);
		float3 l = -reflect(view, h);
		float n_dot_l = saturate(dot(normal, l));
		if (n_dot_l > 0)
		{
			prefiltered_clr += decode_hdr_yc(skybox_Ycube_tex.SampleLevel(skybox_sampler, l, 0).r,
				skybox_Ccube_tex.SampleLevel(skybox_sampler, l, 0)).xyz * n_dot_l;
			total_weight += n_dot_l;
		}
	}

	return prefiltered_clr / max(1e-6f, total_weight);
}

float2 IntegrateBRDF(float shininess, float n_dot_v)
{
	float3 view = float3(sqrt(1 - n_dot_v * n_dot_v), 0, n_dot_v);
	float2 rg = 0;

	const uint NUM_SAMPLES = 1024;
	for (uint i = 0; i < NUM_SAMPLES; ++ i)
	{
		float2 xi = Hammersley2D(i, NUM_SAMPLES);
		float3 h = ImportanceSampleBP(xi, shininess);
		float3 l = -reflect(view, h);
		float n_dot_l = saturate(l.z);
		float n_dot_h = saturate(h.z);
		float v_dot_h = saturate(dot(view, h));
		if (n_dot_l > 0)
		{
			float g = GImplicit(n_dot_v, n_dot_l);
			float g_vis = g * v_dot_h / max(1e-6f, n_dot_h * n_dot_v);
			float fc = pow(1 - v_dot_h, 5);
			rg += float2(1 - fc, fc) * g_vis;
		}
	}

	return rg / NUM_SAMPLES;
}

float3 ApproximateSpecularIBL(float3 c_spec, float glossiness, float3 normal, float3 view)
{
	float shininess = Glossiness2Shininess(glossiness);

	float n_dot_v = saturate(dot(normal, view));
	float3 r = -reflect(view, normal);
	float3 prefiltered_clr = PrefilterEnvMap(shininess, r);
	float2 env_brdf = IntegrateBRDF(shininess, n_dot_v);
	return prefiltered_clr * (c_spec * env_brdf.x + env_brdf.y);
}

float4 GroundTruthPS(float3 normal : TEXCOORD0, float3 incident : TEXCOORD1) : SV_Target
{
	normal = normalize(normal);
	incident = normalize(incident);

	return float4(DiffuseIBL(diffuse, normal)
		+ SpecularIBL(specular, glossiness, normal, incident), 1);
}

float4 ApproximatePS(float3 normal : TEXCOORD0, float3 incident : TEXCOORD1) : SV_Target
{
	normal = normalize(normal);
	incident = normalize(incident);

	return float4(DiffuseIBL(diffuse, normal)
		+ ApproximateSpecularIBL(specular, glossiness, normal, incident), 1);
}
		]]>
	</shader>

	<technique name="GroundTruth">
		<pass name="p0">
			<state name="vertex_shader" value="GroundTruthVS()"/>
			<state name="pixel_shader" value="GroundTruthPS()"/>
		</pass>
	</technique>
	<technique name="Approximate">
		<pass name="p0">
			<state name="vertex_shader" value="GroundTruthVS()"/>
			<state name="pixel_shader" value="ApproximatePS()"/>
		</pass>
	</technique>
	<technique name="Prefiltered">
		<pass name="p0">
			<state name="vertex_shader" value="GroundTruthVS()"/>
			<state name="pixel_shader" value="PrefilteredPS()"/>
		</pass>
	</technique>
	<technique name="PBPrefiltered">
		<pass name="p0">
			<state name="vertex_shader" value="GroundTruthVS()"/>
			<state name="pixel_shader" value="PBPrefilteredPS()"/>
		</pass>
	</technique>
	<technique name="PBFittingPrefiltered">
		<pass name="p0">
			<state name="vertex_shader" value="GroundTruthVS()"/>
			<state name="pixel_shader" value="PBFittingPrefilteredPS()"/>
		</pass>
	</technique>
	<technique name="PBFittingError">
		<pass name="p0">
			<macro name="FITTING" value="1"/>

			<state name="vertex_shader" value="GroundTruthVS()"/>
			<state name="pixel_shader" value="ShowErrorPS()"/>
		</pass>
	</technique>
	<technique name="PBNNPrefiltered">
		<pass name="p0">
			<state name="vertex_shader" value="GroundTruthVS()"/>
			<state name="pixel_shader" value="PBNNPrefilteredPS()"/>
		</pass>
	</technique>
	<technique name="PBNNError">
		<pass name="p0">
			<macro name="FITTING" value="0"/>

			<state name="vertex_shader" value="GroundTruthVS()"/>
			<state name="pixel_shader" value="ShowErrorPS()"/>
		</pass>
	</technique>
</effect>
